AWSTemplateFormatVersion: 2010-09-09
Description: Two tier, ALB-ELB web stack

Parameters: 
  AppName:
    Description: Name of the two tier application
    Type: String
    Default: app-stack
  FrontTierAMI:
    Description: AMI to use on the front facing tier
    Type: String
  FrontTierInstanceKey: 
    Description: SSH Key to use for server login
    Type: String
  AppVPC:
    Description: VPC to place the application stack
    Type: String
  PublicSubnet1:
    Description: First public subnet to use for the front tier and public facing resouces
    Type: String
  PublicSubnet2:
    Description: Second public subnet to use for the front tier and public facing resouces
    Type: String

Resources: 
  ################################
  # Front tier Iam Instance Role
  ################################
  FrontTierIamInstanceRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  ################################
  # Front tier Iam Instance Profile
  ################################
  FrontTierIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref FrontTierIamInstanceRole
  #####################################
  # Front tier instance security group
  #####################################
  FrontTierInstanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AppName}-front-tier-sg'
      GroupDescription: Front tier SG
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - 
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - 
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - 
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - 
          IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
      # SecurityGroupEgress:
      #   - Security Group Rule
      Tags:
        - Key: InstanceName
          Value: !Ref AppName
  #################################
  # Front tier Launch Configuration
  #################################
  FrontTierLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
     # LaunchConfigurationName: !Sub '${AppName}-launch-config'
      IamInstanceProfile: !Ref FrontTierIamInstanceProfile
      ImageId: !Ref FrontTierAMI
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref FrontTierInstanceKey
      SecurityGroups:
        - !GetAtt FrontTierInstanceSecGroup.GroupId
      UserData:
        Fn::Base64: !Sub
          #!/bin/bash -ex # your script here
          echo "cat_cake" > /home/ubuntu/proof.txt
  ###############################################
  # Front tier Application Load Balancer Listener
  ###############################################
  FrontTierALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: FrontTierTargetGroup
      LoadBalancerArn:
          Ref: FrontTierApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ######################################
  # Front tier Application Load Balancer
  ######################################
  FrontTierApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AppName}-ft-lb'
      SecurityGroups:
        - !GetAtt FrontTierInstanceSecGroup.GroupId
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      Tags:
        - Key: AppName
          Value: !Ref AppName
      Type: application
  ######################################
  # Front tier Target Group
  ######################################  
  FrontTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: AppVPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  ################################
  # Front tier Auto Scaling Group
  ################################
  FrontTierAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref FrontTierLaunchConfig
      TargetGroupARNs: 
        - !Ref FrontTierTargetGroup  
      MaxSize: 1
      MinSize: 1
      Tags:
        - Key: Name
          Value: !Ref AppName
          PropagateAtLaunch: True
      VPCZoneIdentifier:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2 
Outputs:
  FrontTierAutoScalingGroup:
    Description: Information about the value
    Value: !Ref FrontTierAutoScalingGroup
    Export: 
      Name: !Sub '${AppName}-front-tier-autoscaling-group' 